/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_PIN_H
#define _MOCK_PIN_H

#include "unity.h"
#include "Pin.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_Pin_Init(void);
void mock_Pin_Destroy(void);
void mock_Pin_Verify(void);




#define PinWrite_Ignore() PinWrite_CMockIgnore()
void PinWrite_CMockIgnore(void);
#define PinWrite_StopIgnore() PinWrite_CMockStopIgnore()
void PinWrite_CMockStopIgnore(void);
#define PinWrite_Expect(Pin, Value) PinWrite_CMockExpect(__LINE__, Pin, Value)
void PinWrite_CMockExpect(UNITY_LINE_TYPE cmock_line, PinT Pin, unsigned char Value);
typedef void (* CMOCK_PinWrite_CALLBACK)(PinT Pin, unsigned char Value, int cmock_num_calls);
void PinWrite_AddCallback(CMOCK_PinWrite_CALLBACK Callback);
void PinWrite_Stub(CMOCK_PinWrite_CALLBACK Callback);
#define PinWrite_StubWithCallback PinWrite_Stub
#define PinModuleInit_Ignore() PinModuleInit_CMockIgnore()
void PinModuleInit_CMockIgnore(void);
#define PinModuleInit_StopIgnore() PinModuleInit_CMockStopIgnore()
void PinModuleInit_CMockStopIgnore(void);
#define PinModuleInit_Expect() PinModuleInit_CMockExpect(__LINE__)
void PinModuleInit_CMockExpect(UNITY_LINE_TYPE cmock_line);
typedef void (* CMOCK_PinModuleInit_CALLBACK)(int cmock_num_calls);
void PinModuleInit_AddCallback(CMOCK_PinModuleInit_CALLBACK Callback);
void PinModuleInit_Stub(CMOCK_PinModuleInit_CALLBACK Callback);
#define PinModuleInit_StubWithCallback PinModuleInit_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
